import os 
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from tkinter import ttk

class CreerDossiersApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Cr√©ateur de dossiers")
        self.root.geometry("550x400")
        self.root.resizable(False, False)
        
        # Variables
        self.chemin_base = tk.StringVar()
        self.fichier_liste = tk.StringVar()
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Interface
        self.creer_interface()
        
    def creer_interface(self):
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Titre
        titre = ttk.Label(main_frame, text="üìÅ Cr√©ateur de dossiers", 
                         font=('Arial', 14, 'bold'))
        titre.grid(row=0, column=0, columnspan=3, pady=(0, 15))
        
        # Chemin de base
        ttk.Label(main_frame, text="Dossier de destination:").grid(
            row=1, column=0, sticky=tk.W, pady=5)
        
        ttk.Entry(main_frame, textvariable=self.chemin_base, width=40).grid(
            row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), padx=(0, 5))
        
        ttk.Button(main_frame, text="Parcourir...", 
                  command=self.choisir_dossier).grid(
            row=2, column=2, sticky=tk.W)
        
        # Fichier liste
        ttk.Label(main_frame, text="Fichier contenant la liste:").grid(
            row=3, column=0, sticky=tk.W, pady=(15, 5))
        
        ttk.Entry(main_frame, textvariable=self.fichier_liste, width=40).grid(
            row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), padx=(0, 5))
        
        ttk.Button(main_frame, text="Parcourir...", 
                  command=self.choisir_fichier).grid(
            row=4, column=2, sticky=tk.W)
        
        # Bouton cr√©er
        btn_creer = ttk.Button(main_frame, text="‚ú® Cr√©er les dossiers", 
                              command=self.creer_dossiers)
        btn_creer.grid(row=5, column=0, columnspan=3, pady=20)
        
        # Zone de log
        ttk.Label(main_frame, text="Journal:").grid(
            row=6, column=0, sticky=tk.W, pady=(0, 5))
        
        self.log_text = scrolledtext.ScrolledText(
            main_frame, height=10, width=60, 
            font=('Consolas', 9), state='disabled')
        self.log_text.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E))
        
    def choisir_dossier(self):
        dossier = filedialog.askdirectory(title="Choisir le dossier de destination")
        if dossier:
            self.chemin_base.set(dossier)
            self.log("üìÇ Dossier s√©lectionn√©: " + dossier)
    
    def choisir_fichier(self):
        fichier = filedialog.askopenfilename(
            title="Choisir le fichier liste",
            filetypes=[("Fichiers texte", "*.txt"), ("Tous les fichiers", "*.*")])
        if fichier:
            self.fichier_liste.set(fichier)
            self.log("üìÑ Fichier s√©lectionn√©: " + fichier)
    
    def log(self, message):
        self.log_text.config(state='normal')
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.log_text.config(state='disabled')
        self.root.update()
    
    def creer_dossiers(self):
        chemin = self.chemin_base.get()
        fichier = self.fichier_liste.get()
        
        # V√©rifications
        if not chemin:
            messagebox.showerror("Erreur", "Veuillez choisir un dossier de destination!")
            return
        
        if not fichier:
            messagebox.showerror("Erreur", "Veuillez choisir un fichier liste!")
            return
        
        if not os.path.exists(chemin):
            messagebox.showerror("Erreur", f"Le chemin '{chemin}' n'existe pas!")
            return
        
        if not os.path.exists(fichier):
            messagebox.showerror("Erreur", f"Le fichier '{fichier}' n'existe pas!")
            return
        
        # Lire le fichier
        try:
            with open(fichier, 'r', encoding='utf-8') as f:
                noms_dossiers = [ligne.strip() for ligne in f if ligne.strip()]
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur de lecture du fichier:\n{e}")
            return
        
        if not noms_dossiers:
            messagebox.showwarning("Attention", "Le fichier est vide!")
            return
        
        # Cr√©er les dossiers
        self.log("\n" + "="*50)
        self.log(f"üöÄ Cr√©ation de {len(noms_dossiers)} dossiers...")
        self.log("="*50)
        
        crees = 0
        for nom in noms_dossiers:
            chemin_complet = os.path.join(chemin, nom)
            try:
                os.makedirs(chemin_complet, exist_ok=True)
                self.log(f"‚úÖ {nom}")
                crees += 1
            except Exception as e:
                self.log(f"‚ùå {nom} - Erreur: {e}")
        
        self.log("="*50)
        self.log(f"‚ú® Termin√©! {crees}/{len(noms_dossiers)} dossiers cr√©√©s")
        self.log("="*50 + "\n")
        
        messagebox.showinfo("Succ√®s", 
            f"{crees} dossiers cr√©√©s avec succ√®s!\n\nEmplacement: {chemin}")

if __name__ == "__main__":
    root = tk.Tk()
    app = CreerDossiersApp(root)
    root.mainloop() 
